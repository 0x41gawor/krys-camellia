# Key derivation
# KL i KR mają mieć po 128bitów

from main import N_KEY_BITS
from operators import *
from hex_to_bin import *

# ================================================================== S-Box =================================================================

sbox1 = [112, 130, 44, 236, 179, 39, 192, 229, 228, 133, 87, 53, 234, 12, 174, 65,
         35, 239, 107, 147, 69, 25, 165, 33, 237, 14, 79, 78, 29, 101, 146, 189,
         134, 184, 175, 143, 124, 235, 31, 206, 62, 48, 220, 95, 94, 197, 11, 26,
         166, 225, 57, 202, 213, 71, 93, 61, 217, 1, 90, 214, 81, 86, 108, 77,
         139, 13, 154, 102, 251, 204, 176, 45, 116, 18, 43, 32, 240, 177, 132, 153,
         223, 76, 203, 194, 52, 126, 118, 5, 109, 183, 169, 49, 209, 23, 4, 215,
         20, 88, 58, 97, 222, 27, 17, 28, 50, 15, 156, 22, 83, 24, 242, 34,
         254, 68, 207, 178, 195, 181, 122, 145, 36, 8, 232, 168, 96, 252, 105, 80,
         170, 208, 160, 125, 161, 137, 98, 151, 84, 91, 30, 149, 224, 255, 100, 210,
         16, 196, 0, 72, 163, 247, 117, 219, 138, 3, 230, 218, 9, 63, 221, 148,
         135, 92, 131, 2, 205, 74, 144, 51, 115, 103, 246, 243, 157, 127, 191, 226,
         82, 155, 216, 38, 200, 55, 198, 59, 129, 150, 111, 75, 19, 190, 99, 46,
         233, 121, 167, 140, 159, 110, 188, 142, 41, 245, 249, 182, 47, 253, 180, 89,
         120, 152, 6, 106, 231, 70, 113, 186, 212, 37, 171, 66, 136, 162, 141, 250,
         114, 7, 185, 85, 248, 238, 172, 10, 54, 73, 42, 104, 60, 56, 241, 164,
         64, 40, 211, 123, 187, 201, 67, 193, 21, 227, 173, 244, 119, 199, 128, 158]

sbox2 = [224, 5, 88, 217, 103, 78, 129, 203, 201, 11, 174, 106, 213, 24, 93, 130,
         70, 223, 214, 39, 138, 50, 75, 66, 219, 28, 158, 156, 58, 202, 37, 123,
         13, 113, 95, 31, 248, 215, 62, 157, 124, 96, 185, 190, 188, 139, 22, 52,
         77, 195, 114, 149, 171, 142, 186, 122, 179, 2, 180, 173, 162, 172, 216, 154,
         23, 26, 53, 204, 247, 153, 97, 90, 232, 36, 86, 64, 225, 99, 9, 51,
         191, 152, 151, 133, 104, 252, 236, 10, 218, 111, 83, 98, 163, 46, 8, 175,
         40, 176, 116, 194, 189, 54, 34, 56, 100, 30, 57, 44, 166, 48, 229, 68,
         253, 136, 159, 101, 135, 107, 244, 35, 72, 16, 209, 81, 192, 249, 210, 160,
         85, 161, 65, 250, 67, 19, 196, 47, 168, 182, 60, 43, 193, 255, 200, 165,
         32, 137, 0, 144, 71, 239, 234, 183, 21, 6, 205, 181, 18, 126, 187, 41,
         15, 184, 7, 4, 155, 148, 33, 102, 230, 206, 237, 231, 59, 254, 127, 197,
         164, 55, 177, 76, 145, 110, 141, 118, 3, 45, 222, 150, 38, 125, 198, 92,
         221, 242, 79, 25, 63, 220, 121, 29, 82, 235, 243, 109, 94, 251, 105, 178,
         240, 49, 12, 212, 207, 140, 226, 117, 169, 74, 87, 132, 17, 69, 27, 245,
         228, 14, 115, 170, 241, 221, 89, 20, 108, 146, 84, 208, 120, 112, 227, 73,
         128, 80, 167, 246, 119, 147, 134, 131, 42, 199, 91, 233, 238, 143, 1, 61]

sbox3 = [56, 65, 22, 118, 217, 147, 96, 242, 114, 194, 171, 154, 117, 6, 87, 160,
         145, 247, 181, 201, 162, 140, 210, 144, 246, 7, 167, 39, 142, 178, 73, 222,
         67, 92, 215, 199, 62, 245, 143, 103, 31, 24, 110, 175, 47, 226, 133, 13,
         83, 240, 156, 101, 234, 163, 174, 158, 236, 128, 45, 107, 168, 43, 54, 166,
         197, 134, 77, 51, 253, 102, 88, 150, 58, 9, 149, 16, 120, 216, 66, 204,
         239, 38, 229, 97, 26, 63, 59, 130, 182, 219, 212, 152, 232, 139, 2, 235,
         10, 44, 29, 176, 111, 141, 136, 14, 25, 135, 78, 11, 169, 12, 121, 17,
         127, 34, 231, 89, 225, 218, 61, 200, 18, 4, 116, 84, 48, 126, 180, 40,
         85, 104, 80, 190, 208, 196, 49, 203, 42, 173, 15, 202, 112, 255, 50, 105,
         8, 98, 0, 36, 209, 251, 186, 237, 69, 129, 115, 109, 132, 159, 238, 74,
         195, 46, 193, 1, 230, 37, 72, 153, 185, 179, 123, 249, 206, 191, 223, 113,
         41, 205, 108, 19, 100, 155, 99, 157, 192, 75, 183, 165, 137, 95, 177, 23,
         244, 188, 211, 70, 207, 55, 94, 71, 148, 250, 252, 91, 151, 254, 90, 172,
         60, 76, 3, 53, 243, 35, 184, 93, 106, 146, 213, 33, 68, 81, 198, 125,
         57, 131, 220, 170, 124, 119, 86, 5, 27, 164, 21, 52, 30, 28, 248, 82,
         32, 20, 233, 189, 221, 228, 161, 224, 138, 241, 214, 122, 187, 227, 64, 79]

sbox4 = [112, 44, 179, 192, 228, 87, 234, 174, 35, 107, 69, 165, 237, 79, 29, 146,
         134, 175, 124, 31, 62, 220, 94, 11, 166, 57, 213, 93, 217, 90, 81, 108,
         139, 154, 251, 176, 116, 43, 240, 132, 223, 203, 52, 118, 109, 169, 209, 4,
         20, 58, 222, 17, 50, 156, 83, 242, 254, 207, 195, 122, 36, 232, 96, 105,
         170, 160, 161, 98, 84, 30, 224, 100, 16, 0, 163, 117, 138, 230, 9, 221,
         135, 131, 205, 144, 115, 246, 157, 191, 82, 216, 200, 198, 129, 111, 19, 99,
         233, 167, 159, 188, 41, 249, 47, 180, 120, 6, 231, 113, 212, 171, 136, 141,
         114, 185, 248, 172, 54, 42, 60, 241, 64, 211, 187, 67, 21, 173, 119, 128,
         130, 236, 39, 229, 133, 53, 12, 65, 239, 147, 25, 33, 14, 78, 101, 189,
         184, 143, 235, 206, 48, 95, 197, 26, 225, 202, 71, 61, 1, 214, 86, 77,
         13, 102, 204, 45, 18, 32, 177, 153, 76, 194, 126, 5, 183, 49, 23, 215,
         88, 97, 27, 28, 15, 22, 24, 34, 68, 178, 181, 145, 8, 168, 252, 80,
         208, 125, 137, 151, 91, 149, 255, 210, 196, 72, 247, 219, 3, 218, 63, 148,
         92, 2, 74, 51, 103, 243, 127, 226, 155, 38, 55, 59, 150, 75, 190, 46,
         121, 140, 110, 142, 245, 182, 253, 89, 152, 106, 70, 186, 37, 66, 162, 250,
         7, 85, 238, 10, 73, 104, 56, 164, 40, 123, 201, 193, 227, 244, 199, 158]

# =================================================================^ S-Box ^================================================================

# ================================================================== Sigma =================================================================
sigma1 = from_hex('A09E667F3BCC908B')
sigma2 = from_hex('B67AE8584CAA73B2')
sigma3 = from_hex('C6EF372FE94F82BE')
sigma4 = from_hex('54FF53A5F1D36F1C')
sigma5 = from_hex('10E527FADE682D1D')
sigma6 = from_hex('B05688C2B3E6C1FD')
# =================================================================^ Sigma ^================================================================


# =============================================================== F - Function ==============================================================
def S_function(x):
    y1 = LEFT(x, 8)
    y2 = RIGHT(LEFT(x, 16), 8)
    y3 = RIGHT(LEFT(x, 24), 8)
    y4 = RIGHT(LEFT(x, 32), 8)
    y5 = RIGHT(LEFT(x, 40), 8)
    y6 = RIGHT(LEFT(x, 48), 8)
    y7 = RIGHT(LEFT(x, 56), 8)
    y8 = RIGHT(LEFT(x, 64), 8)

    y1 = '{0:08b}'.format(sbox1[int(y1, 2)]).encode('ascii')
    y2 = '{0:08b}'.format(sbox2[int(y2, 2)]).encode('ascii')
    y3 = '{0:08b}'.format(sbox3[int(y3, 2)]).encode('ascii')
    y4 = '{0:08b}'.format(sbox4[int(y4, 2)]).encode('ascii')
    y5 = '{0:08b}'.format(sbox2[int(y5, 2)]).encode('ascii')
    y6 = '{0:08b}'.format(sbox3[int(y6, 2)]).encode('ascii')
    y7 = '{0:08b}'.format(sbox4[int(y7, 2)]).encode('ascii')
    y8 = '{0:08b}'.format(sbox1[int(y8, 2)]).encode('ascii')

    return y1 + y2 + y3 + y4 + y5 + y6 + y7 + y8


def P_function(x):
    t1 = LEFT(x, 8)
    t2 = RIGHT(LEFT(x, 16), 8)
    t3 = RIGHT(LEFT(x, 24), 8)
    t4 = RIGHT(LEFT(x, 32), 8)
    t5 = RIGHT(LEFT(x, 40), 8)
    t6 = RIGHT(LEFT(x, 48), 8)
    t7 = RIGHT(LEFT(x, 56), 8)
    t8 = RIGHT(LEFT(x, 64), 8)

    y1 = XOR(XOR(XOR(XOR(XOR(t1, t3), t4), t6), t7), t8)
    y2 = XOR(XOR(XOR(XOR(XOR(t1, t2), t4), t5), t7), t8)
    y3 = XOR(XOR(XOR(XOR(XOR(t1, t2), t3), t5), t6), t8)
    y4 = XOR(XOR(XOR(XOR(XOR(t2, t3), t4), t5), t6), t7)
    y5 = XOR(XOR(XOR(XOR(t1, t2), t6), t7), t8)
    y6 = XOR(XOR(XOR(XOR(t2, t3), t5), t7), t8)
    y7 = XOR(XOR(XOR(XOR(t3, t4), t5), t6), t8)
    y8 = XOR(XOR(XOR(XOR(t1, t4), t5), t6), t7)

    return y1 + y2 + y3 + y4 + y5 + y6 + y7 + y8


def F(x, k):
    result = P_function(S_function(XOR(x, k)))
    return result
# ==============================================================^ F - Function ^=============================================================


# =============================================================== KL KR derivation ==============================================================

def KL_KR_derivation(K):
    KL = bytes()
    KR = bytes()
    if (N_KEY_BITS == 128): 
        KL = K
        KR = from_hex('00000000000000000000000000000000')
    if (N_KEY_BITS == 192): 
        KL = LEFT(K,128)
        KR = CONCATENATE(RIGHT(K,64),NOT(RIGHT(K,64)))
    if (N_KEY_BITS == 256):  
        KL = LEFT(K,128)
        KR = RIGHT(K,128)
    return KL, KR

# ==============================================================^ KL KR derivation ^=============================================================

# =============================================================== KA KB derivation ==============================================================

def KA_KB_generation(KL, KR):
    #purple section
    D1 = LEFT(XOR(KL,KR),64)
    D2 = RIGHT(XOR(KL,KR),64)
    D2 = XOR(D2,F(D1, sigma1))
    D1 = XOR(D1,F(D2, sigma2))
    #blue section
    D1 = XOR(D1, LEFT(KL, 64))
    D2 = XOR(D2, RIGHT(KL, 64))
    D2 = XOR(D2, F(D1, sigma3))
    D1 = XOR(D1, F(D2, sigma4))
    KA = CONCATENATE(D1, D2)
    #yellow section
    if (N_KEY_BITS==192 or N_KEY_BITS==256):
        D1 = LEFT(XOR(KA, KR), 64)
        D2 = RIGHT(XOR(KA, KR), 64) 
        D2 = XOR(D2, F(D1, sigma5))
        D1 = XOR(D1, F(D2, sigma6))
        KB = CONCATENATE(D1, D2)
        return KA, KB
    return KA, None

# ==============================================================^ KA KB derivation ^=============================================================


# ============================================================= Subkeys Generation  =============================================================

def subkeys_generation_128(KL, KR, KA, KB):
    KW1 = o.LEFT(o.ROTATE(KL,0),64)
    KW2 = o.RIGHT(o.ROTATE(KL,0),64)

    K1 = o.LEFT(o.ROTATE(KA,0),64)
    K2 = o.RIGHT(o.ROTATE(KA,0),64)
    K3 = o.LEFT(o.ROTATE(KL,15),64)
    K4 = o.RIGHT(o.ROTATE(KL,15),64)
    K5 = o.LEFT(o.ROTATE(KA,15),64)
    K6 = o.RIGHT(o.ROTATE(KA,15),64)

    KL1 = o.LEFT(o.ROTATE(KA,30),64)
    KL2 = o.RIGHT(o.ROTATE(KA,30),64)

    K7 = o.LEFT(o.ROTATE(KL,45),64)
    K8 = o.RIGHT(o.ROTATE(KL,45),64)
    K9 = o.LEFT(o.ROTATE(KA,45),64)
    K10 = o.RIGHT(o.ROTATE(KL,60),64)
    K11 = o.LEFT(o.ROTATE(KA,60),64)
    K12 = o.RIGHT(o.ROTATE(KA,60),64)

    KL3 = o.LEFT(o.ROTATE(KL,77),64)
    KL4 = o.RIGHT(o.ROTATE(KL,77),64)

    K13 = o.LEFT(o.ROTATE(KL,94),64)
    K14 = o.RIGHT(o.ROTATE(KL,94),64)
    K15 = o.LEFT(o.ROTATE(KA,94),64)
    K16 = o.RIGHT(o.ROTATE(KA,94),64)
    K17 = o.LEFT(o.ROTATE(KL,111),64)
    K18 = o.RIGHT(o.ROTATE(KL,111),64)

    KW3 = o.LEFT(o.ROTATE(KL,111),64) 
    KW4 = o.RIGHT(o.ROTATE(KL,111),64)

    return (KW1, KW2, K1, K2, K3, K4, K5, K6, KL1, KL2, K7, K8, K9, K10, K11, K12, KL3, KL4, K13, K14, K15, K16, K17, K18, KW3, KW4)

def subkeys_generation_192_256(KL, KR, KA, KB):
    KW1 = o.LEFT(o.ROTATE(KL,0),64) # 4 -> 64
    KW2 = o.RIGHT(o.ROTATE(KL,0),64)

    K1 = o.LEFT(o.ROTATE(KB,0),64)
    K2 = o.RIGHT(o.ROTATE(KB,0),64)
    K3 = o.LEFT(o.ROTATE(KR,15),64)
    K4 = o.RIGHT(o.ROTATE(KR,15),64)
    K5 = o.LEFT(o.ROTATE(KA,15),64)
    K6 = o.RIGHT(o.ROTATE(KA,15),64)

    KL1 = o.LEFT(o.ROTATE(KR,30),64)
    KL2 = o.RIGHT(o.ROTATE(KR,30),64)

    K7 = o.LEFT(o.ROTATE(KB,30),64)
    K8 = o.RIGHT(o.ROTATE(KB,30),64)
    K9 = o.LEFT(o.ROTATE(KL,45),64)
    K10 = o.RIGHT(o.ROTATE(KL,45),64)
    K11 = o.LEFT(o.ROTATE(KA,45),64)
    K12 = o.RIGHT(o.ROTATE(KA,45),64)

    KL3 = o.LEFT(o.ROTATE(KL,60),64)
    KL4 = o.RIGHT(o.ROTATE(KL,60),64)

    K13 = o.LEFT(o.ROTATE(KR,60),64)
    K14 = o.RIGHT(o.ROTATE(KR,60),64)
    K15 = o.LEFT(o.ROTATE(KB,60),64)
    K16 = o.RIGHT(o.ROTATE(KB,60),64)
    K17 = o.LEFT(o.ROTATE(KL,77),64)
    K18 = o.RIGHT(o.ROTATE(KL,77),64)

    KL5 = o.LEFT(o.ROTATE(KA,77),64)
    KL6 = o.RIGHT(o.ROTATE(KA,77),64)

    K19 = o.LEFT(o.ROTATE(KR,94),64)
    K20 = o.RIGHT(o.ROTATE(KR,94),64)
    K21 = o.LEFT(o.ROTATE(KA,94),64)
    K22 = o.RIGHT(o.ROTATE(KA,94),64)
    K23 = o.LEFT(o.ROTATE(KL,111),64)
    K24 = o.RIGHT(o.ROTATE(KL,111),64)
        
    KW3 = o.LEFT(o.ROTATE(KB,111),64) 
    KW4 = o.RIGHT(o.ROTATE(KB,111),64)

    return (KW1, KW2, K1, K2, K3, K4, K5, K6, KL1, KL2, K7, K8, K9, K10, K11, K12, KL3, KL4, K13, K14, K15, K16, K17, K18, KL5, KL6, K19, K20, K21, K22, K23, K24, KW3, KW4)

# ============================================================^ Subkeys Generation  ^============================================================


# =============================================================   FEISTEL BLOCK  ================================================================
# does the 6 round of Feistel Cipher on the given input (D1D2 input) 
# as input 6-element tuple of keys is accepted
def feistel_block(D1D2, keys):
    D1 = o.LEFT(D1D2,64)
    D2 = o.RIGHT(D1D2,64)
    (k1, k2, k3, k4, k5, k6) = keys

    # 1-st round
    D1 = D1
    D2 = o.XOR(D2, F(D1,k1))
    # 2-nd round
    D1 = o.XOR(D1, F(D2,k2))
    D2 = D2
    # 3-rd round
    D1 = D1
    D2 = o.XOR(D2, F(D1, k3))
    # 4-th round
    D1 = o.XOR(D1, F(D2, k4))
    D2 = D2
    # 5-th round
    D1 = D1
    D2 = o.XOR(D2, F(D1, k5))
    # 6-th round
    D1 = o.XOR(D1, F(D2, k6))
    D2 = D2

    return D1, D2
# ============================================================^   FEISTEL BLOCK  ^===============================================================